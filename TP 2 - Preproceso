{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>TODO</h3>\n",
    "<p>Aquí nos encargamos de leer la base de datos, limpiar, y expandir los mismos</p>\n",
    "<p>El algoritmo consiste en un <a href=#LoopPrincipal>loop</a>, que para cada archivo realiza lo siguiente:<p>\n",
    "<ol>\n",
    "    <li><a href=#LevantarDataFrame><b>Levantar</b></a> el dataframe (<b style='color:green;'>OK</b>)</li>\n",
    "    <li><a href=#PrimeraExpansion><b>Primera expansión</b></a> (<b style='color:green;'>OK</b>):<ul>\n",
    "            <li>Agregar la fecha de volcado del archivo como año y mes</li>\n",
    "            <li>Expandir la fecha de creación en año y mes</li>\n",
    "            <li>Separar barrio, provincia y país</li>\n",
    "        </ul>\n",
    "    </li>\n",
    "    <li><a href=#Filtrar><b>Filtrar</b></a> (<b style='color:green;'>OK</b>):\n",
    "        <ul>\n",
    "            <li>Por pais</li>\n",
    "            <li>Por provincia</li>\n",
    "            <li>Por diferencia entre creación y volcado no mayor a 18 meses</li>\n",
    "            <li>Precio no nulo</li>\n",
    "        </ul>\n",
    "    </li>\n",
    "    <li><a href=#PrimeraLimpieza><b>Primera limpieza</b></a>, eliminar las columnas que no vamos a usar (<b style='color:green;'>OK</b>)</li>\n",
    "    <li><a href=#SegundaExpansion><b>Segunda expansión</b></a> (<b style='color:red;'>TODO</b>):\n",
    "        <ul>\n",
    "            <li>Expandir los datos en la descripción</li>\n",
    "            <li>Cruzar con las otras bases de datos (distancia a ...)</li>\n",
    "        </ul>\n",
    "    </li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# No vamos a graficar, de momento\n",
    "#%matplotlib inline\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "#import matplotlib.pyplot as plt\n",
    "from os import listdir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Esta función es únicamente para saber si algún archivo se descargó mal\n",
    "def CheckCorruptDownloads():\n",
    "    for archive in listdir(gRutaCarpetaOriginales):\n",
    "        if \".csv\" in archive:\n",
    "            nombreArchivo = gRutaCarpetaOriginales + archive\n",
    "            try:\n",
    "                print(nombreArchivo, end = ': ')\n",
    "                df = pd.read_csv(nombreArchivo, low_memory = False)\n",
    "                print('Ok')\n",
    "            except ValueError:\n",
    "                print(\"Error, archivo corrupto. Descargar de nuevo\")\n",
    "\n",
    "#CheckCorruptDownloads()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Levantar DataFrame</p>\n",
    "<a name='LevantarDataFrame'/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def LeerDataFrame(nombreArchivo):\n",
    "    \"\"\"Función que lee un archivo y devuelve un dataframe\"\"\"\n",
    "    return pd.read_csv(nombreArchivo, low_memory = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Funciones de utilería\n",
    "\n",
    "def SeleccionarSubCampo(campo, separador, indice):\n",
    "    \"\"\"Selecciona un elemento de una lista en string\"\"\"\n",
    "    return campo.split(separador)[indice]\n",
    "\n",
    "def SacarColumna(dataFrame, columnName):\n",
    "    \"\"\"Quita una columna de un dataframe. Si no existe, no hace nada\"\"\"\n",
    "    if columnName in dataFrame:\n",
    "        dataFrame.drop(columnName, axis = 1, inplace = True)\n",
    "\n",
    "def SacarListaColumnas(dataFrame, columnNameList):\n",
    "    \"\"\"Quita una lista de columnas de un dataframe\"\"\"\n",
    "    for columnName in columnNameList:\n",
    "        SacarColumna(dataFrame, columnName)\n",
    "\n",
    "def ResolverSerie(serieFrom, function, indexForUse):\n",
    "    if (serieFrom is None):\n",
    "        return pd.Series(None, index = indexForUse)\n",
    "    return serieFrom.map(function)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Primera Expansion</p>\n",
    "<a name='PrimeraExpansion'/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def AgregarFechaDeVolcado(dataFrame, archivo):\n",
    "    archiveParts = archivo.split('-')\n",
    "    dataFrame['dump_date_year'] = pd.Series(int(archiveParts[2]), index = dataFrame.index)\n",
    "    dataFrame['dump_date_month'] = pd.Series(int(archiveParts[3]), index = dataFrame.index)\n",
    "\n",
    "def ExpandirFechaCreacion(dataFrame):\n",
    "    dataFrame['created_on_year'] = dataFrame['created_on'].map(lambda x: int(x.split('-')[0]))\n",
    "    dataFrame['created_on_month'] = dataFrame['created_on'].map(lambda x: int(x.split('-')[1]))\n",
    "\n",
    "def ExpandirBarrioProvinciaYPais(dataFrame):\n",
    "    if not 'country_name' in dataFrame:\n",
    "        dataFrame['country_name'] = dataFrame['place_with_parent_names'].map(lambda x: x.split('|')[1])\n",
    "    if not 'state_name' in dataFrame:\n",
    "        dataFrame['state_name'] = dataFrame['place_with_parent_names'].map(lambda x: x.split('|')[2])\n",
    "    dataFrame['barrio'] = dataFrame['place_with_parent_names'].map(lambda x: x.split('|')[3])\n",
    "\n",
    "def PrimeraExpansion(dataFrame, archivo):\n",
    "    AgregarFechaDeVolcado(dataFrame, archivo)\n",
    "    ExpandirFechaCreacion(dataFrame)\n",
    "    ExpandirBarrioProvinciaYPais(dataFrame)\n",
    "    if 'surface_in_m2' in dataFrame:\n",
    "        dataFrame['surface_in_m2'].name = 'surface_total_in_m2'\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Filtrar</p>\n",
    "<a name='Filtrar'/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def CalcularDiferencia(dataFrame):\n",
    "    return (dataFrame['dump_date_year'] - dataFrame['created_on_year']) * 12 \\\n",
    "        + (dataFrame['dump_date_month'] - dataFrame['created_on_month'])\n",
    "\n",
    "def Filtrar(dataFrame):\n",
    "    dataFrame = dataFrame[dataFrame['country_name'].isin(['Argentina'])]\n",
    "    dataFrame = dataFrame[dataFrame['state_name'].isin(['Capital Federal',\n",
    "                               'Bs.As. G.B.A. Zona Norte',\n",
    "                               'Bs.As. G.B.A. Zona Oeste',\n",
    "                               'Bs.As. G.B.A. Zona Sur'])]\n",
    "    dataFrame = dataFrame[CalcularDiferencia(dataFrame) < 18]\n",
    "    dataFrame = dataFrame[~dataFrame['price_usd_per_m2'].isnull()]\n",
    "    return dataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Primera Limpieza</p>\n",
    "<a name='PrimeraLimpieza'/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def SacarColumna(dataFrame, columnName):\n",
    "    \"\"\"Quita una columna de un dataframe. Si no existe, no hace nada\"\"\"\n",
    "    if columnName in dataFrame:\n",
    "        dataFrame.drop(columnName, axis = 1, inplace = True)\n",
    "\n",
    "def SacarListaColumnas(dataFrame, columnNameList):\n",
    "    \"\"\"Quita una lista de columnas de un dataframe\"\"\"\n",
    "    for columnName in columnNameList:\n",
    "        SacarColumna(dataFrame, columnName)\n",
    "\n",
    "def EliminarColumnasNoRelevantes(dataFrame):\n",
    "    SacarListaColumnas(dataFrame, ['properati_url',\n",
    "                                 'operation',\n",
    "                                 'geonames_id',\n",
    "                                 'lat-lon',\n",
    "                                 'currency',\n",
    "                                 'price_aprox_local_currency',\n",
    "                                 'price_aprox_usd',\n",
    "                                 'price_per_m2',\n",
    "                                 'image_thumbnail',\n",
    "                                 'place_with_parent_names',\n",
    "                                 'place_with_parent_names_l1',\n",
    "                                 'place_with_parent_names_l2',\n",
    "                                 'country_name',\n",
    "                                 'id',\n",
    "                                 'created_on',\n",
    "                                 'created_on_year',\n",
    "                                 'created_on_month',\n",
    "                                 'extra'])\n",
    "\n",
    "def LimpiarDataFrame(dataFrame):\n",
    "    EliminarColumnasNoRelevantes(dataFrame)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Segunda Expansion</p>\n",
    "<a name='SegundaExpansion'/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def SegundaExpansion(dataFrame):\n",
    "    return 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def ProcesarDataFrame(rutaArchivo, nombreArchivo):\n",
    "    \"\"\"Procesa un archivo csv, y devuelve un dataFrame listo para usar\"\"\"\n",
    "    dataFrame = LeerDataFrame(rutaArchivo)\n",
    "    PrimeraExpansion(dataFrame, nombreArchivo)\n",
    "    dataFrame = Filtrar(dataFrame)\n",
    "    LimpiarDataFrame(dataFrame)\n",
    "    SegundaExpansion(dataFrame)\n",
    "    return dataFrame\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Loop principal</p>\n",
    "<a name='LoopPrincipal'/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def ProcesarArchivos(rutaCarpetaOrigen, rutaCarpetaDestino):\n",
    "    \"\"\"Lee los archivos en rutaCarpetaOrigen, los preprocesa y guarda en rutaCarpetaDestino\"\"\"\n",
    "    for archive in listdir(rutaCarpetaOrigen):\n",
    "        if \".csv\" in archive:\n",
    "            print(archive)\n",
    "            df = ProcesarDataFrame(rutaCarpetaOrigen + archive, archive)\n",
    "            df.to_csv(rutaCarpetaDestino + archive, encoding = 'utf-8', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "start = time.time()\n",
    "ProcesarArchivos('./properties/', './processed/')\n",
    "end = time.time()\n",
    "totalTime = end - start\n",
    "print('Time used: ' + str(totalTime))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2rc1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
